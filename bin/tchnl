#!/usr/bin/perl
use strict;
use warnings;
use Carp;
use POE;
use POE::Wheel::ReadWrite;
use POE::Wheel::ReadLine;
use POE::Filter::Block;
use POE::Filter::HTTP::Parser;
use IO::Socket::INET;
use Zeta::Codec::Frame qw/ascii_n binary_n/;

# 读指定渠道的配置文件: host/port/codec
my $ccfg = do "$ENV{ZMON_HOME}/conf/chnl/cardsv.conf";
confess "can not load cardsv.conf error[$@]" if $@;
my $chost  = $ccfg->{host};
my $cport  = $ccfg->{port};
my $ccodec = $ccfg->{codec};

# 过滤器
my $filter;
my $fargs;
if    ($ccodec =~ /ascii\s+(\d+)/)  { $filter = 'POE::Filter::Block'; $fargs = [ LengthCodec => ascii_n($1) ];  }
elsif ($ccodec =~ /binary\s+(\d+)/) { $filter = 'POE::Filter::Block'; $fargs = [ LengthCodec => binary_n($1) ]; }
elsif ($ccodec =~ /http/)           { $filter = 'POE::Filter::HTTP::Parser', $fargs  = []; }
else { die "no support for $ccfg->{codec}"; }

# 渠道模拟配置: pack/unpack/debug_req/debug_res
my $simu = do "$ENV{ZMON_HOME}/conf/chnl.simu";
die "can not do file[chnl.simu] error[$@]" if $@;

# 测试数据
my %req;
for my $file (<$ENV{ZMON_HOME}/conf/chnl/t/*.req>) {
    $file =~ /([^\/]+).req$/;
    my $name = $1;
    $req{$name} =  do $file; 
}
my @tcode = keys %req;

# session
POE::Session->create(
    inline_states => {
        # 启动
        _start => sub {
            $_[HEAP]{console} = POE::Wheel::ReadLine->new(InputEvent => 'on_select');    
            $_[KERNEL]->yield('on_menu');
        },

        # 菜单
        on_menu => sub {
            $_[HEAP]{console}->put("----------------------");
            $_[HEAP]{console}->put("请选择测试交易");
            $_[HEAP]{console}->put("----------------------");
            $_[HEAP]{console}->put(join("\n", @tcode));
            $_[HEAP]{console}->put("----------------------");
            $_[HEAP]{console}->put("clear  : 清空控制台");
            $_[HEAP]{console}->put("exit   : 退出");
            $_[HEAP]{console}->get("请输入: ");
        },

        # 清理控制台
        on_clear => sub {
            $_[HEAP]{console}->clear();
            $_[KERNEL]->yield('on_menu');
        },

        # 退出
        on_exit => sub {
            delete $_[HEAP]{console};
            exit 0;
        },

        # 选择菜单
        on_select => sub {

            my $input = $_[ARG0];
            # 清理控制台
            if ($input =~ /clear/) {
                $_[KERNEL]->yield('on_clear');
                return 1;
            }
            # 退出
            elsif($input =~ /exit/) {
                $_[KERNEL]->yield('on_exit');
                return 1;
            }
            # 
            unless( exists $req{$input}) {
                $_[HEAP]{console}->put("交易[$input]数据不存在");
                $_[KERNEL]->yield('on_menu');
                return 1;
            }
            $_[HEAP]{console}->put("\n\n******************************");
            $_[HEAP]{console}->put("          测试交易$input");
            $_[HEAP]{console}->put("n******************************");
            $_[HEAP]{console}->put("1> test $input...");
            $_[HEAP]{console}->put("2> connect to $chost:$cport...");
            my $csock = IO::Socket::INET->new(
                 PeerAddr => $chost,
                 PeerPort => $cport,
            );
            my $cw = POE::Wheel::ReadWrite->new(
                Handle     => $csock,
                InputEvent => 'on_response',
                Filter     => $filter->new(@$fargs),
            );
            $_[HEAP]{cw} = $cw;
            if ($input =~ /(r|d)$/) {
                print "输入关联交易流水号:\n";
                my $org_ssn = <>;
                $org_ssn = substr $org_ssn, 0, 6;
                $req{$input}->[61] =~ s/xxxxxx/$org_ssn/;
            }
            warn "3> send>>>>>>>>:\n" . $simu->{debug_req}->($req{$input});
            $cw->put($simu->{pack}->([@{$req{$input}}]));
        },

        on_response => sub {
            warn "4> recv<<<<<<<<:\n" . $simu->{debug_res}->($simu->{unpack}->($_[ARG0]));
            warn "5> 完成!!!\n\n";
            $_[KERNEL]->yield('on_menu');
        },
    },
);

$poe_kernel->run();
exit 0;

sub usage {
   die <<EOF;
tchnl -c cardsv
EOF
}


